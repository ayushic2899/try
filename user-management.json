{
    "openapi": "3.0.2",
    "info": {
        "title": "User Management",
        "version": "1.0.0",
        "description": "User Management project for authentication and authorization of users"
    },
    "servers": [
        {
            "url": "http://user-management-app:8082"
        }
    ],
    "paths": {
        "/search": {
            "get": {
                "tags": [
                    "Search"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GroupedSearchResultModel"
                                    }
                                }
                            }
                        },
                        "description": "Returns search results of users and groups"
                    }
                },
                "operationId": "search",
                "summary": "Gets the search results of users and groups that contain the given string",
                "description": "Gets the search results of users and groups that contain the given string"
            },
            "parameters": [
                {
                    "name": "q",
                    "description": "query",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": true
                }
            ]
        },
        "/user/summary": {
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSummaryModel"
                                }
                            }
                        },
                        "description": "User summary response"
                    }
                },
                "operationId": "getUserSummary",
                "summary": "Fetches summary of Users",
                "description": "Fetches summary of Users"
            }
        },
        "/user/login-status": {
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserLoginStatusModel"
                                }
                            }
                        },
                        "description": "Returns login status details"
                    }
                },
                "operationId": "getLoginStatus",
                "summary": "Fetches login status details of users",
                "description": "Fetches login status details of users"
            },
            "parameters": [
                {
                    "name": "interval",
                    "description": "provide values like today,yesterday, last 7 days",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": false
                },
                {
                    "name": "userId",
                    "description": "user id of a particular user",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": false
                }
            ]
        },
        "/user/connected-user": {
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "interval",
                        "description": "provide values like Today, Last 2 Days, Yesterday",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "description": "Filter for Login Details",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "pageSize",
                        "description": "Page size of Login Details",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "pageIndex",
                        "description": "Page index of Login Details",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sort",
                        "description": "Sort properties for the API",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserLoginInfoModel"
                                    }
                                }
                            }
                        },
                        "description": "Returns list of logged in users"
                    }
                },
                "operationId": "getConnectedUsers",
                "summary": "Fetches list of logged in users in the system",
                "description": "Fetches list of logged in users in the system"
            }
        },
        "/user": {
            "summary": "APIs for Creating User Account",
            "description": "APIs for Creating User Account",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "pageIndex",
                        "description": "Index of page to be fetched",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of records to be fetched per page",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "description": "filter the user listing based on user status and name.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sort",
                        "description": "display sorted user listing based on column name specified.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "groupName",
                        "description": "filter the user listing based on group name specified.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserGridModel"
                                    }
                                }
                            }
                        },
                        "description": "list of users"
                    }
                },
                "operationId": "getUserListing",
                "summary": "To get list of users",
                "description": "To get list of users"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserModel"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IdModel"
                                }
                            }
                        },
                        "description": "Reponse when user is created successfully"
                    },
                    "400": {
                        "description": "Response when bad request"
                    },
                    "401": {
                        "description": "Reponse when unauthorized to create user"
                    },
                    "409": {
                        "description": "Response when there is any conflict in request and current state"
                    }
                },
                "operationId": "createUser",
                "summary": "API for saving the user",
                "description": "API for saving the user"
            }
        },
        "/country": {
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CountryModel"
                                    }
                                }
                            }
                        },
                        "description": "Response when all countries are fetched successfully"
                    }
                },
                "operationId": "getCountries",
                "summary": "API for getting all the countries",
                "description": "API for getting all the countries"
            }
        },
        "/language": {
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LanguageModel"
                                    }
                                }
                            }
                        },
                        "description": "Response when all languages are fetched successfully"
                    }
                },
                "operationId": "getLanguages",
                "summary": "API for getting all the languages",
                "description": "API for getting all the languages"
            }
        },
        "/group": {
            "summary": "Fetches all the groups",
            "description": "Fetches all the groups",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "pageIndex",
                        "description": "Index of page to be fetched",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of records to be fetched per page",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "description": "filter the user listing based on user status and name.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sort",
                        "description": "display sorted user listing based on column name specified.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GroupGridModel"
                                    }
                                }
                            }
                        },
                        "description": "Group found successfully"
                    },
                    "401": {
                        "description": "UnAuthorised"
                    }
                },
                "operationId": "getGroupsList",
                "summary": "Fetches all the groups",
                "description": "Fetches all the groups"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupModel"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IdModel"
                                }
                            }
                        },
                        "description": "Group created successfully"
                    },
                    "400": {
                        "description": "Response when bad request"
                    },
                    "401": {
                        "description": "Reponse when unauthorized to create group"
                    }
                },
                "operationId": "createGroup",
                "summary": "API to create Group",
                "description": "API to create Group"
            }
        },
        "/group/{id}": {
            "summary": "API to perform edit and delete a group",
            "description": "API to perform edit and delete a group",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupDetailModel"
                                }
                            }
                        },
                        "description": "group details"
                    },
                    "404": {
                        "description": "group Id not found"
                    }
                },
                "operationId": "getGroupDetails",
                "summary": "get group details",
                "description": "get group details"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupModel"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "description": "Group updated successfully"
                    },
                    "204": {
                        "description": "No content for this Group ID"
                    },
                    "400": {
                        "description": "Bad Request for update Group List"
                    },
                    "401": {
                        "description": "Unauthroised for editing group"
                    },
                    "404": {
                        "description": "Group Not found for particular Group ID"
                    }
                },
                "operationId": "updateGroup",
                "summary": "Edit a group",
                "description": "Edit a group"
            },
            "delete": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Id of the group to be deleted",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "operationId": "deleteGroup",
                "summary": "API to delete group",
                "description": "API to delete group"
            },
            "parameters": [
                {
                    "name": "id",
                    "description": "Id of the group to be edited or deleted",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/user/{id}/action/block": {
            "put": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique UUID of User",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response when block action is successful"
                    },
                    "404": {
                        "description": "Response when User with given ID not found"
                    },
                    "409": {
                        "description": "Response when there is any conflict in request and current state"
                    }
                },
                "operationId": "blockUser",
                "summary": "API for blocking a user",
                "description": "API for blocking a user"
            }
        },
        "/user/{id}/action/change-password": {
            "put": {
                "requestBody": {
                    "description": "Request body with old and new password",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangePasswordModel"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique UUID of User",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response when change password action is successful"
                    },
                    "404": {
                        "description": "Response when User with given ID not found"
                    },
                    "409": {
                        "description": "Response when there is any conflict in request and current state"
                    }
                },
                "operationId": "changePassword",
                "summary": "API for changing password for a user",
                "description": "API for changing password for a user"
            }
        },
        "/user/{id}/action/extend-account-expiry": {
            "summary": "API for extending account expiry data",
            "description": "API for extending account expiry data",
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DateModel"
                            },
                            "examples": {
                                "DateModel": {
                                    "value": {
                                        "date": "1599296683000"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "examples": {
                            "ID": {
                                "value": "10"
                            }
                        },
                        "name": "id",
                        "description": "Unique UUID of User",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response when account expiry is extended successful"
                    },
                    "400": {
                        "description": "Response when account expiry date is invalid"
                    },
                    "401": {
                        "description": "Response when unauthorized access"
                    },
                    "404": {
                        "description": "Response when User with given ID not found"
                    }
                },
                "operationId": "extendAccountExpiryDate",
                "summary": "API for extending account expiry data",
                "description": "API for extending account expiry data"
            }
        },
        "/user/{id}/action/unblock": {
            "put": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique UUID of User",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response when unblock action is successful"
                    },
                    "404": {
                        "description": "Response when User with given ID not found"
                    },
                    "409": {
                        "description": "Response when there is any conflict in request and current state"
                    }
                },
                "operationId": "unblockUser",
                "summary": "API for unblocking a user",
                "description": "API for unblocking a user"
            }
        },
        "/user/configuration": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationModel"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "description": "Reponse when config is created successfully"
                    }
                },
                "operationId": "addUserConfiguration",
                "summary": "add user configuration",
                "description": "add user configuration"
            }
        },
        "/user/configuration/{key}": {
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationModel"
                                }
                            }
                        },
                        "description": "configuration of the user based on key"
                    }
                },
                "operationId": "getConfiguration",
                "summary": "gets configuration for an user based on key",
                "description": "gets configuration for an user based on key"
            },
            "parameters": [
                {
                    "name": "key",
                    "description": "config key",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/user/{id}/detail": {
            "summary": "API for fetching User Details",
            "description": "API for fetching User Details",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "examples": {
                            "ID": {
                                "value": "10"
                            }
                        },
                        "name": "id",
                        "description": "Unique UUID of User",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetailModel"
                                },
                                "examples": {
                                    "UserDetailModel": {
                                        "value": {
                                            "fullName": "John Smith",
                                            "displayName": "John S",
                                            "email": "john.smith@subex.com",
                                            "groupNames": [
                                                "Administrator",
                                                "Developer"
                                            ],
                                            "status": "Active",
                                            "statusUpdatedOn": "1588310786000",
                                            "reportingManager": "Mark Twain",
                                            "profileEditedOn": "1588397186000",
                                            "passwordChangedOn": "1588433381000",
                                            "passwordExpiredOn": "1585841381000",
                                            "createdOn": "1578231041000",
                                            "createdBy": "John K",
                                            "country": "India",
                                            "language": "English (UK)",
                                            "notes": "This is the user with Administrator and Developer groups",
                                            "contactAddress": "#78, Andreas Street, New York City",
                                            "contactNumber": "9876543210",
                                            "passwordExpiresOn": "1596375041000",
                                            "accountExpiresOn": "1599296683000"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Response when User Details are fetched successfully"
                    },
                    "401": {
                        "description": "Response when unauthourized access"
                    },
                    "404": {
                        "description": "Response when User with given ID not found"
                    }
                },
                "operationId": "getUserDetail",
                "summary": "API for fetching User Details",
                "description": "API for fetching User Details"
            }
        },
        "/user/{id}": {
            "summary": "APIs for Fetching, Modifying and Deleting User Account",
            "description": "APIs for Fetching, Modifying and Deleting User Account",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique UUID of User",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserModel"
                                }
                            }
                        },
                        "description": "Response when user details are fetched successfully"
                    },
                    "401": {
                        "description": "Response when unauthorized access"
                    },
                    "404": {
                        "description": "Response when user not found"
                    }
                },
                "operationId": "getUser",
                "summary": "API to get user details",
                "description": "API to get user details"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserModel"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique UUID of User",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "sample": {
                                        "value": "\"some text\""
                                    }
                                }
                            }
                        },
                        "description": "Response when user details are updated successfully"
                    },
                    "401": {
                        "description": "Response for unauthorized access"
                    },
                    "404": {
                        "description": "Response when user not found"
                    },
                    "409": {
                        "description": "Response when there is any conflict in request and current state"
                    }
                },
                "operationId": "updateUser",
                "summary": "API for modifying the user details",
                "description": "API for modifying the user details"
            },
            "delete": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique UUID of User",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response when user is deleted successfully"
                    },
                    "404": {
                        "description": "Response when User with given ID not found"
                    },
                    "409": {
                        "description": "Response when there is any conflict in request and current state"
                    }
                },
                "operationId": "deleteUser",
                "summary": "API for soft-deleting a user",
                "description": "API for soft-deleting a user"
            }
        },
        "/user/{id}/image": {
            "summary": "API for upload and get user's profile picture",
            "description": "API for upload and get user's profile picture",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique UUID of User",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UrlModel"
                                },
                                "examples": {
                                    "Url Model Example": {
                                        "value": {
                                            "url": "/images/image.png"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Response when image is fetched successfully"
                    },
                    "401": {
                        "description": "Response when unauthorized access"
                    },
                    "404": {
                        "description": "Response when User with given ID not found"
                    }
                },
                "operationId": "getProfilePicture",
                "summary": "API for fetching the user's profile picture",
                "description": "API for fetching the user's profile picture"
            },
            "delete": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "User id.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response when user image is deleted successfully"
                    },
                    "401": {
                        "description": "Response when unauthorized access"
                    },
                    "404": {
                        "description": "Response when User with given ID not found"
                    }
                },
                "operationId": "deleteProfilePicture",
                "summary": "API for deleting the user's profile picture",
                "description": "API for deleting the user's profile picture"
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "format": "binary",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique UUID of User",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Respone when image uploaded successfully"
                    },
                    "401": {
                        "description": "Response when unauthorized access"
                    },
                    "404": {
                        "description": "Response when User with given ID not found"
                    }
                },
                "operationId": "uploadProfilePicture",
                "summary": "API for saving the user's profile picture",
                "description": "API for saving the user's profile picture"
            }
        },
        "/applications": {
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApplicationModel"
                                    }
                                }
                            }
                        },
                        "description": "gets list of all applications"
                    }
                },
                "operationId": "getApplications",
                "summary": "gets list of all applications",
                "description": "gets list of all applications"
            }
        },
        "/group/{id}/applications": {
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique UUID of Group",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApplicationModel"
                                    }
                                }
                            }
                        },
                        "description": "gets list of all applications"
                    },
                    "404": {
                        "description": "Response when GroupId  not found"
                    }
                },
                "operationId": "getGroupApplications",
                "summary": "gets list of all applications of group",
                "description": "gets list of all applications of group"
            }
        },
        "/group/{groupId}/users": {
            "summary": "Add user to a group",
            "description": "Add user to a group",
            "post": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "description": "Id of the user ",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added user to the group"
                    },
                    "204": {
                        "description": "No content for this Group ID"
                    },
                    "400": {
                        "description": "Bad Request for update Group List"
                    },
                    "404": {
                        "description": "Group Not found for particular Group ID"
                    }
                },
                "operationId": "addUserToGroup",
                "summary": "Add user to the group",
                "description": "Add user to the group"
            },
            "delete": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "description": "",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User has been removed from the group successfuly."
                    },
                    "404": {
                        "description": "User or group not found"
                    },
                    "400": {
                        "description": "User or group ID is invalid"
                    }
                },
                "operationId": "removeUserFromGroup",
                "summary": "Remove user from a group",
                "description": "Remove user from a group"
            },
            "parameters": [
                {
                    "name": "groupId",
                    "description": "Id of the group",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/panel/getModuleRootUrl": {
            "summary": "get Root URL of Module",
            "description": "get Root URL of Module",
            "post": {
                "tags": [
                    "Panel"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceRootUrlResponseModel"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "rootUrl": "some text"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "success"
                    }
                },
                "operationId": "getRootUrlOfModule",
                "summary": "API to get Root URL of Module",
                "description": "API to get Root URL of Module"
            },
            "parameters": [
                {
                    "name": "clientId",
                    "description": "name of the client Id ",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/panel/getRegisteredModuleDetails": {
            "summary": "API to fetch the Service Registration Details",
            "description": "API to fetch the Service Registration Details ",
            "post": {
                "tags": [
                    "Panel"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RegistrationDetailsResponseModel"
                                    }
                                },
                                "examples": {
                                    "example": {
                                        "value": [
                                            {
                                                "clientId": "some text",
                                                "clientName": "some text",
                                                "LeftMenuIcon": "some text",
                                                "LeftMenuDescription": "some text",
                                                "parentClientId": "some text",
                                                "parentClientName": "some text",
                                                "isParent": "some text",
                                                "landingPageClientDisplayName": "some text",
                                                "landingPageClientDescription": "some text",
                                                "landingPageIcon": "some text",
                                                "landingPageParentRootUrl": "some text",
                                                "LeftPanelsubMenus": [
                                                    {
                                                        "subMenuDisplayName": "some text",
                                                        "subMenuNavigationPath": "some text"
                                                    },
                                                    {
                                                        "subMenuDisplayName": "some text",
                                                        "subMenuNavigationPath": "some text"
                                                    }
                                                ],
                                                "leftMenuDisplayName": "some text"
                                            },
                                            {
                                                "clientId": "some text",
                                                "clientName": "some text",
                                                "LeftMenuIcon": "some text",
                                                "LeftMenuDescription": "some text",
                                                "parentClientId": "some text",
                                                "parentClientName": "some text",
                                                "isParent": "some text",
                                                "landingPageClientDisplayName": "some text",
                                                "landingPageClientDescription": "some text",
                                                "landingPageIcon": "some text",
                                                "landingPageParentRootUrl": "some text",
                                                "LeftPanelsubMenus": [
                                                    {
                                                        "subMenuDisplayName": "some text",
                                                        "subMenuNavigationPath": "some text"
                                                    },
                                                    {
                                                        "subMenuDisplayName": "some text",
                                                        "subMenuNavigationPath": "some text"
                                                    }
                                                ],
                                                "leftMenuDisplayName": "some text"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "success"
                    }
                },
                "operationId": "getRegisteredModuleDetails",
                "summary": "API to fetch the Registered Service Details",
                "description": "API to fetch the Registered service Details"
            }
        },
        "/export/user": {
            "summary": "Api for exporting the users and groups",
            "description": "Api for exporting the users and groups",
            "post": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "examples": {
                            "Sample": {
                                "value": "\"CSV\""
                            }
                        },
                        "name": "formatType",
                        "description": "format of the file for displaying the data",
                        "schema": {
                            "enum": [
                                "CSV",
                                "PDF",
                                "RTF",
                                "TXT"
                            ],
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "examples": {
                            "sample": {
                                "value": [
                                    "user name",
                                    "contact number"
                                ]
                            }
                        },
                        "name": "columnNames",
                        "description": "list of column names to be exported",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "filter",
                        "description": "filter to be applied for exporting the users data",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "examples": {
                            "sample": {
                                "value": "\"username:asc\""
                            }
                        },
                        "name": "sort",
                        "description": "sort to be applied for exporting users data",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "locale",
                        "description": "set export file language",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "multipart/form-data": {
                                "schema": {
                                    "format": "binary",
                                    "type": "string"
                                }
                            },
                            "application/pdf": {
                                "schema": {
                                    "format": "binary",
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Suceesfuly exported the data"
                    }
                },
                "operationId": "exportUserDetails",
                "summary": "Method for exporting the user details",
                "description": "Method for exporting the user details"
            }
        },
        "/export/group": {
            "post": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "examples": {
                            "sample": {
                                "value": [
                                    "group Name",
                                    "No of users"
                                ]
                            }
                        },
                        "name": "columnNames",
                        "description": "list of column names to be exported",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "examples": {
                            "sample": {
                                "value": "\"groupName:desc\""
                            }
                        },
                        "name": "filter",
                        "description": "filter to be applied for exporting group details",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "examples": {
                            "example": {
                                "value": "\"groupName:asc\""
                            }
                        },
                        "name": "sort",
                        "description": "sort to be applied for exporting group data",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "formatType",
                        "description": "please specify the format of the file",
                        "schema": {
                            "enum": [
                                "PDF",
                                "TXT",
                                "RTF",
                                "CSV"
                            ],
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "locale",
                        "description": "set language of export file",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "multipart/form-data": {
                                "schema": {
                                    "format": "binary",
                                    "type": "string"
                                }
                            },
                            "application/pdf": {
                                "schema": {
                                    "format": "binary",
                                    "type": "string"
                                }
                            }
                        },
                        "description": "successfully exported the column"
                    }
                },
                "operationId": "exportGroupDetails",
                "summary": "Method for exporting the group detail",
                "description": "Method for exporting the group detail"
            },
            "parameters": [
                {
                    "name": "formatType",
                    "description": "please specify the format of the file",
                    "schema": {
                        "enum": [
                            "PDF",
                            "TXT",
                            "RTF",
                            "CSV"
                        ],
                        "type": "string"
                    },
                    "in": "query",
                    "required": true
                }
            ]
        },
        "/export/sessions": {
            "summary": "Method for exporting the session details",
            "description": "Method for exporting the session details",
            "post": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "examples": {
                            "sample": {
                                "value": [
                                    "user name",
                                    "contact number"
                                ]
                            }
                        },
                        "name": "columnNames",
                        "description": "list of column names to be exported",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "examples": {
                            "example": {
                                "value": "\"TXT\""
                            }
                        },
                        "name": "exportType",
                        "description": "type of the export",
                        "schema": {
                            "enum": [
                                "CSV",
                                "PDF",
                                "TXT",
                                "RTF"
                            ],
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "examples": {
                            "example": {
                                "value": "\"startdate:12/05/2021\""
                            }
                        },
                        "name": "filter",
                        "description": "filter to be applied for exporting the session details",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "examples": {
                            "example": {
                                "value": "\"name:asc\""
                            }
                        },
                        "name": "sort",
                        "description": "sort to be applied for exporting the session details",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "examples": {
                            "Sample": {
                                "value": "\"Last 7 Days\""
                            }
                        },
                        "name": "interval",
                        "description": "provide values like today,yesterday, last 7 days",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "locale",
                        "description": "set export file language",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "multipart/form-data": {
                                "schema": {
                                    "format": "binary",
                                    "type": "string"
                                },
                                "examples": {
                                    "example": {
                                        "value": "\"<FILE>\""
                                    }
                                }
                            }
                        },
                        "description": "success"
                    }
                },
                "operationId": "exportSessionDetails",
                "summary": "Method for exporting the session details",
                "description": "Method for exporting the session details"
            }
        },
        "/user/customizeddetails": {
            "summary": "APIs for Creating User Account",
            "description": "APIs for Creating User Account",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "pageIndex",
                        "description": "Index of page to be fetched",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of records to be fetched per page",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "description": "filter the user listing based on user status and name.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sort",
                        "description": "display sorted user listing based on column name specified.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserGridModel"
                                    }
                                }
                            }
                        },
                        "description": "list of users"
                    }
                },
                "operationId": "getCustomizedUserListing",
                "summary": "To get list of users",
                "description": "To get list of users with customized details"
            }
        },
        "/group/customizeddetails": {
            "summary": "Fetches all the groups",
            "description": "Fetches all the groups",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "pageIndex",
                        "description": "Index of page to be fetched",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of records to be fetched per page",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "description": "filter the user listing based on user status and name.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sort",
                        "description": "display sorted user listing based on column name specified.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GroupGridModel"
                                    }
                                }
                            }
                        },
                        "description": "Group found successfully"
                    },
                    "401": {
                        "description": "UnAuthorised"
                    }
                },
                "operationId": "getCustomizedGroupListing",
                "summary": "Fetches all the groups",
                "description": "Fetches all the groups"
            }
        },
        "/user/isFederated": {
            "summary": "API to check federation type",
            "description": "API to check federation type",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                },
                                "examples": {
                                    "example": {
                                        "value": "true"
                                    }
                                }
                            }
                        },
                        "description": "success"
                    }
                },
                "operationId": "getIsFederated",
                "summary": "API to check federation type",
                "description": "API to check federation type"
            }
        },
        "/user/usersCount/": {
            "summary": "API to fetch the count of total users in keycloak",
            "description": "API to fetch the count of total users in keycloak",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "examples": {
                            "filter": {
                                "value": "\"some text\""
                            }
                        },
                        "name": "filter",
                        "description": "Filter text for users",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "integer"
                                },
                                "examples": {
                                    "Example": {
                                        "value": "44"
                                    }
                                }
                            }
                        },
                        "description": "success"
                    }
                },
                "operationId": "getUsersCount",
                "summary": "API to fetch the count of total users in keycloak",
                "description": "API to fetch the count of total users in keycloak"
            }
        },
        "/group/groupsCount": {
            "summary": "API to fetch the count of total groups in keycloak",
            "description": "API to fetch the count of total groups in keycloak",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "examples": {
                            "filter": {
                                "value": "\"some text\""
                            }
                        },
                        "name": "filter",
                        "description": "Filter text for groups",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "examples": {
                                    "Example": {
                                        "value": "80"
                                    }
                                }
                            }
                        },
                        "description": "success"
                    }
                },
                "operationId": "getGroupsCount",
                "summary": "API to fetch the count of total groups in keycloak",
                "description": "API to fetch the count of total groups in keycloak"
            }
        },
        "/group/groupsNames": {
            "summary": "API for fetching the names of the group",
            "description": "API for fetching the names of the group",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "examples": {
                                    "samplegroups": {
                                        "value": [
                                            "some text",
                                            "some text"
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "successfully fetched the groupNames"
                    }
                },
                "operationId": "getGroupNames",
                "summary": "API for fetching the names of the group",
                "description": "API for fetching the names of the group"
            }
        },
        "/group/groupUsers": {
            "summary": "Mehod for listing groupName and users in each group",
            "description": "Mehod for listing groupName and users in each group",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GroupUsersModel"
                                    }
                                }
                            }
                        },
                        "description": "successfully fetched the users count in each group"
                    },
                    "400": {
                        "description": "unable to fetch the details"
                    }
                },
                "operationId": "getGroupUsersCount",
                "summary": "Method for getting the users count in each group",
                "description": "Method for getting the users count in each group"
            }
        },
        "/user/{id}/groupNames": {
            "summary": "Method for getting the groupNames assocaited with user",
            "description": "Method for getting the groupNames assocaited with user",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "examples": {
                            "sample": {
                                "value": "\"some text\""
                            }
                        },
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "examples": {
                                    "sample": {
                                        "value": [
                                            "some text",
                                            "some text"
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "success when groupNames fetched successfully"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "404": {
                        "description": "when user does not exist"
                    }
                },
                "operationId": "getUserGroupNames",
                "summary": "Method for getting the groups associated with a user",
                "description": "Method for getting the groups associated with a user"
            }
        },
        "/user/{id}/customizedgroupNames": {
            "summary": "Method for getting the groupNames assocaited with user",
            "description": "Method for getting the groupNames assocaited with user",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "examples": {
                            "sample": {
                                "value": "\"some text\""
                            }
                        },
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "examples": {
                                    "sample": {
                                        "value": [
                                            "some text",
                                            "some text"
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "success when groupNames fetched successfully"
                    },
                    "401": {
                        "description": "unauthorized"
                    },
                    "404": {
                        "description": "when user does not exist"
                    }
                },
                "operationId": "getCustomizedUserGroupNames",
                "summary": "Method for getting the groups associated with a user csrf disabled",
                "description": "Method for getting the groups associated with a user"
            }
        },
        "/user/userNames/": {
            "summary": "API for fetching the names of the users",
            "description": "API for fetching the names of the users",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "examples": {
                                    "sampleUsers": {
                                        "value": [
                                            "some text",
                                            "some text"
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "successfully fetched the groupNames"
                    }
                },
                "operationId": "getUserNames",
                "summary": "API for fetching the names of the user",
                "description": "API for fetching the names of the users"
            }
        },
        "/register/getAppClientCategories": {
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AppClientCategoryModel"
                                    }
                                }
                            }
                        },
                        "description": "response containing app, client, categories"
                    }
                },
                "operationId": "getAppClientCategories"
            }
        },
        "/register/dynamicEntity": {
            "summary": "Api to register pipelines/Dynamic entities",
            "description": "Api to register pipelines/Dynamic entities",
            "put": {
                "requestBody": {
                    "description": "Json containing new name and old name",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityUpdateModel"
                            },
                            "examples": {
                                "example": {
                                    "value": {
                                        "client": "some text",
                                        "category": "some text",
                                        "oldName": "some text",
                                        "newName": "some text",
                                        "application": "some text",
                                        "username": "some text"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusModel"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "status": "some text",
                                            "message": "some text"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Response when entity is updated"
                    }
                },
                "operationId": "updateDynamicEntity",
                "summary": "To update dynamic enity",
                "description": "To update dynamic enity"
            },
            "post": {
                "requestBody": {
                    "description": "Accepts model to register entities in user-management",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityRegisterModel"
                            },
                            "examples": {
                                "example": {
                                    "value": {
                                        "name": "some text",
                                        "client": "some text",
                                        "category": "some text"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "description": "Response when entity is registered successfully"
                    }
                },
                "operationId": "addDynamicEntity",
                "summary": "To add dynamic entities",
                "description": "To add dynamic entities"
            },
            "delete": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "application",
                        "description": "name of the application",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "clientId",
                        "description": "client id from keycloak",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "category",
                        "description": "name of the category",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "entityId",
                        "description": "id of the entity",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Deleted successfully"
                    }
                },
                "operationId": "deleteDynamicEntity",
                "summary": "Delete dynamic entity and mappings with group"
            }
        },
        "/register/dynamicEntity/{application}/{clientId}/{category}": {
            "summary": "api for fetching dynamic objects",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "clientId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "groupName",
                        "description": "",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "pageNumber",
                        "description": "",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "pageSize",
                        "description": "",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "search",
                        "description": "",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DynamicObjectResponseModel"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "data": [
                                                {
                                                    "addedOn": "some text",
                                                    "dynamicEntityName": "some text",
                                                    "privileges": {

                                                    },
                                                    "entityId": 17,
                                                    "entityDesc": "some text"
                                                },
                                                {
                                                    "addedOn": "some text",
                                                    "dynamicEntityName": "some text",
                                                    "privileges": {

                                                    },
                                                    "entityId": 51,
                                                    "entityDesc": "some text"
                                                }
                                            ],
                                            "count": 42
                                        }
                                    }
                                }
                            }
                        },
                        "description": "response of dynamic object array"
                    }
                },
                "operationId": "getDynamicObjectsBasedOnAppClientCategory"
            },
            "parameters": [
                {
                    "name": "application",
                    "description": "Name of the Application",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "clientId",
                    "description": "client id from keycloak",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "category",
                    "description": "Name of the category",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "pageNumber",
                    "description": "",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query",
                    "required": true
                },
                {
                    "name": "pageSize",
                    "description": "",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query",
                    "required": true
                }
            ]
        },
        "/register/saveOrUpdatePrivilege": {
            "summary": "Api to save privileges for categories",
            "description": "Api to save privileges for categories",
            "post": {
                "requestBody": {
                    "description": "Request body consisting of pipeline and privileges enabled for it",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SavePrivilegeModel"
                            },
                            "examples": {
                                "example": {
                                    "value": [
                                        {
                                            "privileges": {
                                                "create": true,
                                                "view": false
                                            },
                                            "entityName": "pipeline1"
                                        },
                                        {
                                            "privileges": {
                                                "create": true,
                                                "view": false
                                            },
                                            "entityName": "pipeline2"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "202": {
                        "description": "saved successfully"
                    }
                },
                "operationId": "saveOrUpdateDynamicEntity",
                "summary": "To save privileges for dynamic entity",
                "description": "To save privileges for dynamic entity"
            },
            "parameters": [
                {
                    "name": "appName",
                    "description": "name of the application",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": true
                },
                {
                    "name": "clientId",
                    "description": "keycloak id from keycloak",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": true
                },
                {
                    "name": "categoryName",
                    "description": "name of the category",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": true
                },
                {
                    "name": "groupName",
                    "description": "name of the group",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": true
                }
            ]
        },
        "/register/getPrivileges": {
            "summary": "Api to get user privileges on dynamic entities",
            "description": "Api to get user privileges on dynamic entities",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "entityIds",
                        "description": "array of dynamic entity ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "format": "int64",
                                "type": "integer"
                            }
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DynamicPrivilegeAccessModel"
                                    }
                                },
                                "examples": {
                                    "example": {
                                        "value": [
                                            {
                                                "privileges": {
                                                    "create": "true",
                                                    "view": "false"
                                                },
                                                "entityName": "entity1"
                                            },
                                            {
                                                "privileges": {
                                                    "create": "true",
                                                    "view": "true"
                                                },
                                                "entityName": "entity2"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Response with array of entities with their privileges"
                    }
                },
                "operationId": "getPrivileges",
                "summary": "Api to get user privileges on dynamic entities"
            },
            "parameters": [
                {
                    "name": "username",
                    "description": "logged in user name",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": true
                },
                {
                    "name": "application",
                    "description": "name of the application",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": true
                },
                {
                    "name": "clientId",
                    "description": "client id from keycloak",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": true
                },
                {
                    "name": "category",
                    "description": "name of the category",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": true
                }
            ]
        },
        "/group/{id}/applications/{clientName}": {
            "summary": "Fetch client info",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationModel"
                                }
                            }
                        },
                        "description": "fetch application details for single client"
                    }
                },
                "operationId": "getGroupApplicationForClient",
                "summary": "Api to get the ApplicationModel"
            },
            "parameters": [
                {
                    "name": "id",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "clientName",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/idp": {
            "summary": "Gives back list of all identity providers in the realm",
            "description": "Gives back list of all identity providers in the realm",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "examples": {
                                    "idp list example": {
                                        "value": [
                                            "sample alias 1",
                                            "sample alias 2"
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "List of strings where each string corresponds to the IDP alias."
                    }
                },
                "operationId": "getIdentityProviders",
                "summary": "Return the list of identity providers in the realm",
                "description": "Return the list of identity providers in the realm"
            }
        },
        "/group/applications/{id}/{parentName}": {
            "summary": "Fetch client info",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApplicationModel"
                                    }
                                }
                            }
                        },
                        "description": "fetch application details for single client"
                    }
                },
                "operationId": "getGroupApplicationForParent",
                "summary": "Api to get the ApplicationModel based on parent name"
            },
            "parameters": [
                {
                    "name": "id",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "parentName",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/register/bulkDynamicEntities": {
            "summary": "Api to register pipelines/Dynamic entities",
            "description": "Api to register pipelines/Dynamic entities",
            "post": {
                "requestBody": {
                    "description": "Accepts model to register entities in user-management",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EntityRegisterModel"
                                }
                            },
                            "examples": {
                                "example": {
                                    "value": {
                                        "name": "some text",
                                        "client": "some text",
                                        "category": "some text"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "description": "Response when entity is registered successfully"
                    }
                },
                "operationId": "addBulkDynamicEntities",
                "summary": "To add dynamic entities in bulk",
                "description": "To add dynamic entities in bulk"
            }
        },
        "/register/getEntityIds/{application}/{clientId}/{category}/": {
            "summary": "api for fetching list of dynamic objects ids",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "clientId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "groupName",
                        "description": "",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "pageNumber",
                        "description": "",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "pageSize",
                        "description": "",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginationModel"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "data": [
                                                1,
                                                2,
                                                4,
                                                5
                                            ],
                                            "count": 4
                                        }
                                    }
                                }
                            }
                        },
                        "description": "response of dynamic object array"
                    }
                },
                "operationId": "getDynamicObjectIdsBasedOnAppClientCategory"
            },
            "parameters": [
                {
                    "name": "application",
                    "description": "Name of the Application",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "clientId",
                    "description": "client id from keycloak",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "category",
                    "description": "Name of the category",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "pageNumber",
                    "description": "",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query",
                    "required": true
                },
                {
                    "name": "pageSize",
                    "description": "",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query",
                    "required": true
                }
            ]
        },
         
        "/userExternal": {
            "summary": "APIs for Creating External User Account",
            "description": "APIs for Creating External User Account",
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "parameters": [
                    {
                        "name": "pageIndex",
                        "description": "Index of page to be fetched",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of records to be fetched per page",
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "description": "filter the user listing based on user status and name.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "sort",
                        "description": "display sorted user listing based on column name specified.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "groupName",
                        "description": "filter the user listing based on group name specified.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalUserGridModel"
                                    }
                                }
                            }
                        },
                        "description": "list of users"
                    }
                },
                "operationId": "getExternalUserListing",
                "summary": "To get list of External users",
                "description": "To get list of External users"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalUserModel"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IdModel"
                                }
                            }
                        },
                        "description": "Reponse when user is created successfully"
                    },
                    "400": {
                        "description": "Response when bad request"
                    },
                    "401": {
                        "description": "Reponse when unauthorized to create user"
                    },
                    "409": {
                        "description": "Response when there is any conflict in request and current state"
                    }
                },
                "operationId": "createExternalUser",
                "summary": "API for saving the External user",
                "description": "API for saving the External user"
            }
        },
        "/trail": {
            "get": {
                "tags": [
                    "UserManagement"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TrailModel"
                                    }
                                }
                            }
                        },
                        "description": "gets list of all Trail applications"
                    }
                },
                "operationId": "getTrail",
                "summary": "gets list of all Trail applications",
                "description": "gets list of all Trail applications"
            }
        }
    },
    "components": {
        "schemas": {
            "GroupedSearchResultModel": {
                "description": "Search results grouped by type",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "group": {
                        "description": "Group for which the results belong to.",
                        "type": "string"
                    },
                    "results": {
                        "description": "Entities belonging to the group",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchResultItemModel"
                        }
                    }
                }
            },
            "SearchResultItemModel": {
                "description": "Search result for a entity type",
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name displayed to the user",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value used to perform an operation when the user selects this entity",
                        "type": "string"
                    },
                    "description": {
                        "description": "Short description appended to the name when displaying the results.",
                        "type": "string"
                    },
                    "isLdapUser": {
                        "description": "whether ldap user or not",
                        "type": "boolean"
                    }
                }
            },
            "UserSummaryModel": {
                "description": "Model for User Summary",
                "required": [
                    "total",
                    "active",
                    "expired",
                    "blocked"
                ],
                "type": "object",
                "properties": {
                    "active": {
                        "description": "Total active users",
                        "type": "number"
                    },
                    "total": {
                        "description": "Total number of users",
                        "type": "number"
                    },
                    "expired": {
                        "description": "Total expired user accounts",
                        "type": "number"
                    },
                    "blocked": {
                        "description": "Total blocked users",
                        "type": "number"
                    }
                }
            },
            "UserLoginStatusModel": {
                "description": "Model for User login status",
                "required": [
                    "successful",
                    "failed"
                ],
                "type": "object",
                "properties": {
                    "successful": {
                        "description": "successful logins",
                        "type": "number"
                    },
                    "failed": {
                        "description": "failed logins",
                        "type": "number"
                    }
                },
                "example": {
                    "successful": 10,
                    "failed": 15
                }
            },
            "UserLoginInfoModel": {
                "description": "Model for connected user details",
                "required": [
                    "name",
                    "datetime",
                    "sourceAddress",
                    "userName",
                    "status",
                    "description"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the user",
                        "type": "string"
                    },
                    "datetime": {
                        "format": "int64",
                        "description": "Time of user login",
                        "type": "integer"
                    },
                    "sourceAddress": {
                        "description": "Source Address of User",
                        "type": "string"
                    },
                    "userName": {
                        "description": "username of User",
                        "type": "string"
                    },
                    "status": {
                        "description": "Sucess/Failed",
                        "type": "string"
                    },
                    "description": {
                        "description": "Discription of the event",
                        "type": "string"
                    }
                },
                "example": {
                    "name": "John Smith",
                    "datetime": 1599296683000,
                    "sourceAddress": "10.113.56.245",
                    "userName": "subexworld.org",
                    "status": "Successful",
                    "description": "Login was successful"
                }
            },
            "ChangePasswordModel": {
                "description": "",
                "required": [
                    "newPassword"
                ],
                "type": "object",
                "properties": {
                    "oldPassword": {
                        "description": "Existing User Password",
                        "type": "string"
                    },
                    "newPassword": {
                        "description": "New Password given by the User",
                        "type": "string"
                    }
                },
                "example": {
                    "oldPassword": "admin123",
                    "newPassword": "xyz123"
                }
            },
            "UserModel": {
                "description": "User model",
                "required": [
                    "timeZone",
                    "dateFormat",
                    "timeFormat",
                    "startOfWeek",
                    "showTimeZone"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "UUID of the user",
                        "type": "string"
                    },
                    "userName": {
                        "description": "Username for the account",
                        "type": "string"
                    },
                    "password": {
                        "description": "User account password",
                        "type": "string"
                    },
                    "displayName": {
                        "description": "User's display name",
                        "type": "string"
                    },
                    "email": {
                        "description": "User's email id",
                        "type": "string"
                    },
                    "contactNumber": {
                        "description": "User's contact number",
                        "type": "string"
                    },
                    "contactAddress": {
                        "description": "User's contact address",
                        "type": "string"
                    },
                    "countryId": {
                        "description": "Selected Country UUID",
                        "type": "string"
                    },
                    "languageId": {
                        "description": "Selected language UUID",
                        "type": "string"
                    },
                    "notes": {
                        "description": "Notes about the user",
                        "type": "string"
                    },
                    "reportingManagerId": {
                        "description": "Reporting manager UUID",
                        "type": "string"
                    },
                    "accountExpiry": {
                        "format": "int64",
                        "description": "Account expiry date in millis ",
                        "type": "integer"
                    },
                    "numberOfApplications": {
                        "format": "int32",
                        "description": "Number of Applications per user",
                        "type": "integer"
                    },
                    "numberOfModules": {
                        "format": "int32",
                        "description": "Number of Modules per user",
                        "type": "integer"
                    },
                    "groupIds": {
                        "description": "UUIDs of the groups attached to user",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "description": "Tags associated with the User",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "firstName": {
                        "description": "User's first name",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "User's last name",
                        "type": "string"
                    },
                    "timeZone": {
                        "description": "Timezone for date/time fields",
                        "type": "string"
                    },
                    "dateFormat": {
                        "description": "Format for date fields",
                        "type": "string"
                    },
                    "timeFormat": {
                        "description": "Format for time fields",
                        "type": "string"
                    },
                    "startOfWeek": {
                        "description": "Start day of the week",
                        "enum": [
                            "Sunday",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday"
                        ],
                        "type": "string"
                    },
                    "showTimeZone": {
                        "description": "Show/Hide timezone in date/time fields",
                        "type": "boolean"
                    },
                    "enable2FA": {
                        "description": "if 2 Factor Authentication enabled",
                        "type": "boolean"
                    },
                    "identityProviderLink": {
                        "description": "Alias of the identity provider user is to be linked to",
                        "type": "string"
                    }
                },
                "example": {
                    "id": "59485130-95f1-11ea-9c17-d9e1353b02d1",
                    "userName": "john.smith",
                    "password": "john@123",
                    "fullName": "John Smith",
                    "displayName": "John S",
                    "email": "john.smith@gmail.com",
                    "contactNumber": "9473865391",
                    "contactAddress": "#78, Andreas Street, New York City",
                    "countryId": "61205fb0-95f1-11ea-9c17-d9e1353b02d1",
                    "languageId": "6aa3ad30-95f1-11ea-9c17-d9e1353b02d1",
                    "notes": "John Smith works as a manager",
                    "reportingManagerId": "746b56b0-95f1-11ea-9c17-d9e1353b02d1",
                    "accountExpiry": "1588060446625",
                    "groupIds": [
                        "746b56b0-95f1-11ea-9c17-d9e1353b02d1",
                        "7ee671b0-95f1-11ea-9c17-d9e1353b02d1"
                    ],
                    "tags": [
                        "admin",
                        "user"
                    ]
                }
            },
            "IdModel": {
                "description": "Model for returning ID as reponse",
                "required": [
                    "id",
                    "validEmail",
                    "validUserName"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "UUID of the entity created",
                        "type": "string"
                    },
                    "validEmail": {
                        "description": "property for checking whether the email is already registered",
                        "type": "boolean"
                    },
                    "validUserName": {
                        "description": "property to describe whether email already exists or not",
                        "type": "boolean"
                    }
                },
                "example": {
                    "id": "some text",
                    "validEmail": true,
                    "validUserName": true
                }
            },
            "CountryModel": {
                "description": "Model for Country Data",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Unique code of the Country",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the country",
                        "type": "string"
                    }
                },
                "example": {
                    "code": "IN",
                    "name": "India"
                }
            },
            "LanguageModel": {
                "description": "Model for Language Data",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Unique code of the Language",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the Language",
                        "type": "string"
                    }
                },
                "example": {
                    "code": "fr",
                    "name": "French"
                }
            },
            "UserDetailModel": {
                "description": "Model for User details",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "displayName": {
                        "description": "Display name of the user",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email ID of the user",
                        "type": "string"
                    },
                    "groupNames": {
                        "description": "Names of the groups assigned to the user",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "description": "Current status of the user- Block/Active/Expired",
                        "type": "string"
                    },
                    "statusUpdatedOn": {
                        "format": "int64",
                        "description": "Date in milliseconds when User status was modified last time",
                        "type": "integer"
                    },
                    "reportingManager": {
                        "description": "Reporting manager's name",
                        "type": "string"
                    },
                    "profileEditedOn": {
                        "format": "int64",
                        "description": "Date in milliseconds when User account was modified last time",
                        "type": "integer"
                    },
                    "passwordChangedOn": {
                        "format": "int64",
                        "description": "Date in milliseconds when User password was last changed.",
                        "type": "integer"
                    },
                    "passwordExpiredOn": {
                        "format": "int64",
                        "description": "Date in milliseconds when User password was expired last time.",
                        "type": "integer"
                    },
                    "createdOn": {
                        "format": "int64",
                        "description": "Date in milliseconds when User account was created",
                        "type": "integer"
                    },
                    "createdBy": {
                        "description": "User who created this User Account",
                        "type": "string"
                    },
                    "country": {
                        "description": "Country selected in account details",
                        "type": "string"
                    },
                    "language": {
                        "description": "Language selected in account details",
                        "type": "string"
                    },
                    "notes": {
                        "description": "Notes/description about the user",
                        "type": "string"
                    },
                    "contactAddress": {
                        "description": "Contact address of the User",
                        "type": "string"
                    },
                    "contactNumber": {
                        "description": "Contact number of the User",
                        "type": "string"
                    },
                    "passwordExpiresOn": {
                        "format": "int64",
                        "description": "Date in milliseconds when User password will get expired.",
                        "type": "integer"
                    },
                    "accountExpiresOn": {
                        "format": "int64",
                        "description": "Date in milliseconds when User account will get expired.",
                        "type": "integer"
                    },
                    "groupAccesses": {
                        "description": "All applications and privileges of the groups assigned to the user",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupAccessModel"
                        }
                    },
                    "firstName": {
                        "description": "User's first name",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "User's last name",
                        "type": "string"
                    }
                },
                "example": {
                    "firstName": "John",
                    "lastName": "Smith",
                    "displayName": "John S",
                    "email": "john.smith@subex.com",
                    "groupNames": [
                        "Administrator",
                        "Developer"
                    ],
                    "status": "active",
                    "statusUpdatedOn": 1588310786000,
                    "reportingManager": "Mark Twain",
                    "profileEditedOn": 1588397186000,
                    "passwordChangedOn": 1588433381000,
                    "passwordExpiredOn": 1585841381000,
                    "createdOn": 1578231041000,
                    "createdBy": "John K",
                    "country": "India",
                    "language": "English (UK)",
                    "notes": "This is the user with Administrator and Developer groups",
                    "contactAddress": "#78, Andreas Street, New York City",
                    "contactNumber": "9876543210",
                    "passwordExpiresOn": 1596375041000,
                    "accountExpiresOn": 1599296683000
                }
            },
            "DateModel": {
                "description": "Model for date in milliseconds",
                "required": [
                    "date"
                ],
                "type": "object",
                "properties": {
                    "date": {
                        "format": "int64",
                        "description": "Date in milliseconds",
                        "type": "integer"
                    }
                },
                "example": {
                    "date": 1599296683000
                }
            },
            "ConfigurationModel": {
                "title": "Root Type for ConfigurationModel",
                "description": "model for configuration",
                "required": [
                    "key",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "key": {
                        "description": "configuration key",
                        "type": "string"
                    },
                    "value": {
                        "description": "configuration value",
                        "type": "string"
                    }
                },
                "example": {
                    "key": "config1",
                    "value": "user config"
                }
            },
            "GroupGridModel": {
                "description": "Model for Group List",
                "required": [
                    "name",
                    "id",
                    "createdOn",
                    "numberOfApplications",
                    "numberOfUsers"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the group",
                        "type": "string"
                    },
                    "createdOn": {
                        "format": "int64",
                        "description": "Created On date in the form of milli seconds",
                        "type": "integer"
                    },
                    "id": {
                        "description": "UUID of the group",
                        "type": "string"
                    },
                    "numberOfApplications": {
                        "format": "int64",
                        "description": "Number of Applications per Group",
                        "type": "integer"
                    },
                    "numberOfModules": {
                        "format": "int64",
                        "description": "Number of Modules per Group",
                        "type": "integer"
                    },
                    "numberOfUsers": {
                        "format": "int64",
                        "description": "Number Of Users Per Group",
                        "type": "integer"
                    },
                    "description": {
                        "description": "Group's description",
                        "type": "string"
                    }
                },
                "example": {
                    "name": "Admin",
                    "createdOn": "1587097549000",
                    "id": "1c456bb0-95f1-11ea-9c17-d9e1353b02d1",
                    "numberOfApplications": 5,
                    "numberOfUsers": 10,
                    "description": "admin user"
                }
            },
            "GroupModel": {
                "description": "Model for Group Creation",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "ID of the group",
                        "type": "string"
                    },
                    "notes": {
                        "description": "Notes for the group",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the group",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags associated with the group",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "applications": {
                        "description": "List of applications and priviledges associated with the group",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApplicationModel"
                        }
                    }
                }
            },
            "GroupDetailModel": {
                "type": "object",
                "properties": {
                    "groupName": {
                        "description": "group Name",
                        "type": "string"
                    },
                    "noOfActiveUsers": {
                        "format": "int32",
                        "description": "no of active users",
                        "type": "integer"
                    },
                    "createdBy": {
                        "description": "group created by",
                        "type": "string"
                    },
                    "createdOn": {
                        "description": "group created On",
                        "type": "string"
                    },
                    "description": {
                        "description": "group description",
                        "type": "string"
                    },
                    "applications": {
                        "description": "List of applications and priviledges associated with the group",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApplicationModel"
                        }
                    }
                }
            },
            "ApplicationModel": {
                "description": "Application Model with Previliges",
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "ID of the application",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the application",
                        "type": "string"
                    },
                    "url": {
                        "description": "Front-end URL of the application",
                        "type": "string"
                    },
                    "description": {
                        "description": "A short summary of the application",
                        "type": "string"
                    },
                    "public_client": {
                        "description": "A public client is accessed by web applications",
                        "type": "boolean"
                    },
                    "modules": {
                        "description": "Privileges provided by the application",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ModuleModel"
                        }
                    },
                    "clientId": {
                        "description": "User Client Id",
                        "type": "string"
                    }
                }
            },
            "ModuleModel": {
                "description": "A privilege provided by an application",
                "required": [
                    "name",
                    "privileges"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the privilege - unique within the service/application",
                        "type": "string"
                    },
                    "description": {
                        "description": "Name of the privilige - Human readable text",
                        "type": "string"
                    },
                    "isSelected": {
                        "description": "is selected",
                        "type": "boolean"
                    },
                    "privileges": {
                        "description": "Child priviliges",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrivilegeModel"
                        }
                    }
                }
            },
            "PrivilegeModel": {
                "description": "A privilege provided by an application",
                "required": [
                    "name",
                    "children"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the privilege - unique within the service/application",
                        "type": "string"
                    },
                    "application_id": {
                        "description": "ID of the application this privilege is provided by. If given, description is ignored.",
                        "type": "string"
                    },
                    "isSelected": {
                        "description": "is selected",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "Name of the privilige - Human readable text",
                        "type": "string"
                    },
                    "children": {
                        "description": "Child priviliges",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrivilegeModel"
                        }
                    }
                }
            },
            "UserGridModel": {
                "description": "model to display users",
                "required": [
                    "id",
                    "userName",
                    "status",
                    "email",
                    "displayName"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "UUID of the user",
                        "type": "string"
                    },
                    "userName": {
                        "description": "name of the user",
                        "type": "string"
                    },
                    "status": {
                        "description": "current status of the user",
                        "type": "string"
                    },
                    "email": {
                        "description": "user email",
                        "type": "string"
                    },
                    "accountExpiry": {
                        "format": "int64",
                        "description": "user account expiry date",
                        "type": "integer"
                    },
                    "createdDate": {
                        "format": "int64",
                        "description": "date when user is added",
                        "type": "integer"
                    },
                    "description": {
                        "description": "description",
                        "type": "string"
                    },
                    "contactNumber": {
                        "description": "user contactNumber",
                        "type": "string"
                    },
                    "country": {
                        "description": "user country",
                        "type": "string"
                    },
                    "language": {
                        "description": "user language",
                        "type": "string"
                    },
                    "contactAddress": {
                        "description": "user contactAddress",
                        "type": "string"
                    },
                    "displayName": {
                        "description": "user shortName",
                        "type": "string"
                    },
                    "firstName": {
                        "description": "First Name of the User",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "Last Name of the User",
                        "type": "string"
                    },
                    "noOfApplications": {
                        "format": "int32",
                        "description": "no of applications",
                        "type": "integer"
                    },
                    "noOfModules": {
                        "format": "int32",
                        "description": "no of modules",
                        "type": "integer"
                    },
                    "group": {
                        "description": "groups assigned to the user",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isLdap": {
                        "description": "",
                        "type": "boolean"
                    }
                },
                "example": {
                    "id": "1c456bb0-95f1-11ea-9c17-d9e1353b02d1",
                    "userName": "John",
                    "status": "active",
                    "role": "admin",
                    "group": [
                        "ngp_group1",
                        "ngp_group2"
                    ],
                    "email": "john.keats@subex.com",
                    "fullName": "John Keats",
                    "accountExpiry": "2020-04-27",
                    "createdDate": "Mikel",
                    "shortName": "mike",
                    "description": "admin user",
                    "contactNumber": "987976997",
                    "country": "US",
                    "language": "ENG",
                    "contactAddress": "#123,USA"
                }
            },
            "UserGroupAccessModel": {
                "description": "Model for all applications and privileges attached to a group",
                "required": [
                    "groupName"
                ],
                "type": "object",
                "properties": {
                    "groupName": {
                        "description": "Name of the group",
                        "type": "string"
                    },
                    "applications": {
                        "description": "List of applications and privileges assigned to a group",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApplicationModel"
                        }
                    }
                },
                "example": {
                    "groupName": "some text",
                    "applications": [
                        {
                            "id": "some text",
                            "name": "some text",
                            "url": "some text",
                            "description": "some text",
                            "public_client": true,
                            "modules": [
                                {
                                    "name": "some text",
                                    "description": "some text",
                                    "isSelected": true,
                                    "privileges": [
                                        {
                                            "name": "some text",
                                            "application_id": "some text",
                                            "isSelected": true,
                                            "description": "some text",
                                            "children": [
                                                {

                                                },
                                                {

                                                }
                                            ]
                                        },
                                        {
                                            "name": "some text",
                                            "application_id": "some text",
                                            "isSelected": true,
                                            "description": "some text",
                                            "children": [
                                                {

                                                },
                                                {

                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "name": "some text",
                                    "description": "some text",
                                    "isSelected": true,
                                    "privileges": [
                                        {
                                            "name": "some text",
                                            "application_id": "some text",
                                            "isSelected": true,
                                            "description": "some text",
                                            "children": [
                                                {

                                                },
                                                {

                                                }
                                            ]
                                        },
                                        {
                                            "name": "some text",
                                            "application_id": "some text",
                                            "isSelected": true,
                                            "description": "some text",
                                            "children": [
                                                {

                                                },
                                                {

                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "id": "some text",
                            "name": "some text",
                            "url": "some text",
                            "description": "some text",
                            "public_client": true,
                            "modules": [
                                {
                                    "name": "some text",
                                    "description": "some text",
                                    "isSelected": true,
                                    "privileges": [
                                        {
                                            "name": "some text",
                                            "application_id": "some text",
                                            "isSelected": true,
                                            "description": "some text",
                                            "children": [
                                                {

                                                },
                                                {

                                                }
                                            ]
                                        },
                                        {
                                            "name": "some text",
                                            "application_id": "some text",
                                            "isSelected": true,
                                            "description": "some text",
                                            "children": [
                                                {

                                                },
                                                {

                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "name": "some text",
                                    "description": "some text",
                                    "isSelected": true,
                                    "privileges": [
                                        {
                                            "name": "some text",
                                            "application_id": "some text",
                                            "isSelected": true,
                                            "description": "some text",
                                            "children": [
                                                {

                                                },
                                                {

                                                }
                                            ]
                                        },
                                        {
                                            "name": "some text",
                                            "application_id": "some text",
                                            "isSelected": true,
                                            "description": "some text",
                                            "children": [
                                                {

                                                },
                                                {

                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            },
            "UrlModel": {
                "description": "Model for url of the requested resource",
                "required": [
                    "url"
                ],
                "type": "object",
                "properties": {
                    "url": {
                        "description": "url of the requested resource",
                        "type": "string"
                    }
                },
                "example": {
                    "url": "/images/image.png"
                }
            },
            "RegistrationDetailsResponseModel": {
                "description": "includes the client details registered in keycloak",
                "type": "object",
                "properties": {
                    "clientId": {
                        "description": "client ID ",
                        "type": "string"
                    },
                    "clientName": {
                        "description": "Name of the client",
                        "type": "string"
                    },
                    "LeftMenuIcon": {
                        "description": "Name of the icon",
                        "type": "string"
                    },
                    "LeftMenuDescription": {
                        "description": "description of the Client Id ",
                        "type": "string"
                    },
                    "parentClientId": {
                        "description": "parent client id of the service",
                        "type": "string"
                    },
                    "parentClientName": {
                        "description": "parent client Name of the service",
                        "type": "string"
                    },
                    "isParent": {
                        "description": "flag to indicate whether the service is parent or child",
                        "type": "string"
                    },
                    "landingPageClientDisplayName": {
                        "description": "Client Display Name of the landing page",
                        "type": "string"
                    },
                    "landingPageClientDescription": {
                        "description": "Client Description for landing Page",
                        "type": "string"
                    },
                    "landingPageIcon": {
                        "description": "icon for landing page icon",
                        "type": "string"
                    },
                    "landingPageParentRootUrl": {
                        "description": "Root URL of the parent Service which is not registered to keycloak ",
                        "type": "string"
                    },
                    "LeftPanelsubMenus": {
                        "description": "Sub menu of the Left Panel , where sub modules are not registered to keycloak",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SubMenuAttributeModel"
                        }
                    },
                    "leftMenuDisplayName": {
                        "description": "Display Name of the service of left Menu",
                        "type": "string"
                    }
                },
                "example": {
                    "clientId": "some text",
                    "clientName": "some text",
                    "LeftMenuIcon": "some text",
                    "LeftMenuDescription": "some text",
                    "parentClientId": "some text",
                    "parentClientName": "some text",
                    "isParent": "some text",
                    "landingPageClientDisplayName": "some text",
                    "landingPageClientDescription": "some text",
                    "landingPageIcon": "some text",
                    "landingPageParentRootUrl": "some text",
                    "LeftPanelsubMenus": [
                        {
                            "subMenuDisplayName": "some text",
                            "subMenuNavigationPath": "some text"
                        },
                        {
                            "subMenuDisplayName": "some text",
                            "subMenuNavigationPath": "some text"
                        }
                    ]
                }
            },
            "SubMenuAttributeModel": {
                "description": " sub menu Attribute model",
                "type": "object",
                "properties": {
                    "subMenuDisplayName": {
                        "description": "name of the sub menu",
                        "type": "string"
                    },
                    "subMenuNavigationPath": {
                        "description": "Navigaion Path or url of the module which is not registered to keycloak",
                        "type": "string"
                    }
                },
                "example": {
                    "subMenuDisplayName": "some text",
                    "subMenuNavigationPath": "some text"
                }
            },
            "ServiceRootUrlResponseModel": {
                "description": "Response Model to fetch The Root Url ",
                "type": "object",
                "properties": {
                    "rootUrl": {
                        "description": "root Url of the client",
                        "type": "string"
                    }
                },
                "example": {
                    "rootUrl": "some text"
                }
            },
            "GroupUsersModel": {
                "description": "model for displaying the groupname and no of users associated with each group",
                "required": [
                    "name",
                    "usersCount"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "name of the group",
                        "type": "string"
                    },
                    "usersCount": {
                        "format": "int64",
                        "description": "count of users in each group",
                        "type": "integer"
                    }
                },
                "example": {
                    "name": "some text",
                    "usersCount": 53
                }
            },
            "NameDescriptionModel": {
                "description": "Model which has name and description attributes",
                "required": [
                    "name",
                    "description"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "accepts name ",
                        "type": "string",
                        "example": "\"some text\""
                    },
                    "description": {
                        "description": "description of the entity",
                        "type": "string",
                        "example": "\"some description\""
                    }
                },
                "example": {
                    "name": "some text",
                    "description": "some text"
                }
            },
            "StatusModel": {
                "description": "Model which gives api response ",
                "required": [
                    "status",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "description": "status of the api",
                        "type": "string"
                    },
                    "message": {
                        "description": "message which gives some information about api",
                        "type": "string"
                    }
                },
                "example": {
                    "status": "some text",
                    "message": "some text"
                }
            },
            "EntityRegisterModel": {
                "description": "Model to register entities",
                "required": [
                    "name",
                    "clientId",
                    "category",
                    "application",
                    "username",
                    "entityId",
                    "entityDesc"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "name of the entity",
                        "type": "string"
                    },
                    "category": {
                        "description": "category of the entity",
                        "type": "string"
                    },
                    "application": {
                        "description": "application name",
                        "type": "string"
                    },
                    "username": {
                        "description": "username of the logged in user",
                        "type": "string"
                    },
                    "entityId": {
                        "format": "int64",
                        "description": "entityId",
                        "type": "integer"
                    },
                    "entityDesc": {
                        "description": "description of the entity",
                        "type": "string"
                    },
                    "clientId": {
                        "description": "client id from keycloak",
                        "type": "string"
                    }
                },
                "example": {
                    "name": "some text",
                    "category": "some text",
                    "application": "some text",
                    "username": "some text",
                    "entityId": 6,
                    "entityDesc": "some text",
                    "clientId": "some text"
                }
            },
            "EntityUpdateModel": {
                "description": "Model used to update entities",
                "required": [
                    "clientId",
                    "category",
                    "newName",
                    "application",
                    "username",
                    "entityId"
                ],
                "type": "object",
                "properties": {
                    "clientId": {
                        "description": "client id from keycloak",
                        "type": "string"
                    },
                    "category": {
                        "description": "name of the category",
                        "type": "string"
                    },
                    "newName": {
                        "description": "",
                        "type": "string"
                    },
                    "application": {
                        "description": "name of the application",
                        "type": "string"
                    },
                    "username": {
                        "description": "username of the logged in user",
                        "type": "string"
                    },
                    "entityId": {
                        "format": "int64",
                        "description": "primary of the entity from studio to which it belongs to",
                        "type": "integer"
                    },
                    "entityDesc": {
                        "description": "description about the entity",
                        "type": "string"
                    }
                },
                "example": {
                    "client": "some text",
                    "category": "some text",
                    "newName": "some text",
                    "application": "some text",
                    "username": "some text",
                    "entityId": 38,
                    "entityDesc": "some text"
                }
            },
            "DynamicObjectModel": {
                "description": "Model for dynamic entity info along with category, pipeline, client, application, privileges for 1 dynamic entity",
                "required": [
                    "addedOn",
                    "dynamicEntityName",
                    "privileges",
                    "entityId",
                    "entityDesc"
                ],
                "type": "object",
                "properties": {
                    "addedOn": {
                        "description": "when dynamic entity got added",
                        "type": "string"
                    },
                    "dynamicEntityName": {
                        "description": "name of the dynamic entity",
                        "type": "string"
                    },
                    "privileges": {
                        "description": "object of privileges ",
                        "type": "object"
                    },
                    "entityId": {
                        "format": "int64",
                        "description": "entityId",
                        "type": "integer"
                    },
                    "entityDesc": {
                        "description": "entity description",
                        "type": "string"
                    }
                },
                "example": {
                    "dynamicEntityId": "1",
                    "addedOn": "some text",
                    "dynamicEntityName": "some text",
                    "privileges": {
                        "create": "true",
                        "edit": "false"
                    }
                }
            },
            "ClientCategoryModel": {
                "description": "model with client name and list of categories of that client",
                "required": [
                    "clientName",
                    "parentName"
                ],
                "type": "object",
                "properties": {
                    "clientName": {
                        "description": "name of the client ",
                        "type": "string"
                    },
                    "categories": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "privileges": {
                        "description": "Object with key as category and values as list of privileges that category has",
                        "type": "object"
                    },
                    "clientId": {
                        "description": "client id from keycloak",
                        "type": "string"
                    },
                    "parentName": {
                        "description": "Name of the parent for which client belongs to",
                        "type": "string"
                    },
                    "parentDescription": {
                        "description": "Description of the parent",
                        "type": "string"
                    }
                },
                "example": {
                    "clientName": "some text",
                    "categories": [
                        "some text",
                        "some text"
                    ],
                    "privileges": {

                    },
                    "clientId": "some text",
                    "groupId": "some text",
                    "groupName": "some text"
                }
            },
            "AppClientCategoryModel": {
                "description": "model with app, client, categories",
                "required": [
                    "appName",
                    "clients"
                ],
                "type": "object",
                "properties": {
                    "appName": {
                        "description": "",
                        "type": "string"
                    },
                    "clients": {
                        "description": "list of clients and their models",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClientCategoryModel"
                        }
                    }
                }
            },
            "DynamicPrivilegeAccessModel": {
                "description": "Model used while saving privileges",
                "required": [
                    "privileges",
                    "entityId",
                    "entityName"
                ],
                "type": "object",
                "properties": {
                    "privileges": {
                        "description": "object of privilege name and flag",
                        "type": "object"
                    },
                    "entityName": {
                        "description": "name of the entity",
                        "type": "string"
                    },
                    "entityId": {
                        "format": "int64",
                        "description": "entity id ",
                        "type": "integer"
                    }
                },
                "example": {
                    "privileges": {

                    },
                    "entityName": "some text",
                    "entityId": 15
                }
            },
            "DynamicObjectResponseModel": {
                "description": "Model contains data and total records count",
                "required": [
                    "data",
                    "count"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "description": "data ",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DynamicObjectModel"
                        }
                    },
                    "count": {
                        "format": "int64",
                        "description": "total records present in the system",
                        "type": "integer"
                    },
                    "globalPrivileges": {
                        "description": "map consisting of global privileges",
                        "type": "object"
                    }
                }
            },
            "SavePrivilegeModel": {
                "description": "Model which is used to get post details",
                "required": [
                    "data"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "description": "Array of privilege model",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DynamicPrivilegeAccessModel"
                        }
                    },
                    "globalPrivileges": {
                        "description": "",
                        "type": "object"
                    },
                    "tempGlobalPrivileges": {
                        "description": "",
                        "type": "object"
                    }
                },
                "example": {
                    "data": [
                        {
                            "privileges": {

                            },
                            "entityName": "some text",
                            "entityId": 50
                        },
                        {
                            "privileges": {

                            },
                            "entityName": "some text",
                            "entityId": 65
                        }
                    ],
                    "globalPrivileges": {
                        "create": "true"
                    },
                    "tempGlobalPrivileges": {
                        "view": "true",
                        "access": "false"
                    }
                }
            },
            "ParentStudioModel": {
                "description": "Model for Group Creation",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "parentDescription": {
                        "description": "Description of the parent studio",
                        "type": "string"
                    },
                    "parentName": {
                        "description": "Name of the parent studio",
                        "type": "string"
                    }
                }
            },
            "ParentModel": {
                "description": "Model for Group Creation",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "ID of the parent studio",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the parent",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the parent studio",
                        "type": "string"
                    }
                }
            },
            "PaginationModel": {
                "description": "Model contains data and total records count",
                "required": [
                    "data",
                    "count"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "description": "data ",
                        "type": "array",
                        "items": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    "count": {
                        "format": "int64",
                        "description": "total records present in the system",
                        "type": "integer"
                    }
                }
            },
            "DemoModel": {
                "description": "",
                "type": "object"
            },
            "ExternalUserModel": {
                "description": "User model",
                "required": [
                    "timeZone",
                    "dateFormat",
                    "timeFormat",
                    "startOfWeek",
                    "showTimeZone"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "UUID of the user",
                        "type": "string"
                    },
                    "userName": {
                        "description": "Username for the account",
                        "type": "string"
                    },
                    "password": {
                        "description": "User account password",
                        "type": "string"
                    },
                    "displayName": {
                        "description": "User's display name",
                        "type": "string"
                    },
                    "email": {
                        "description": "User's email id",
                        "type": "string"
                    },
                    "contactNumber": {
                        "description": "User's contact number",
                        "type": "string"
                    },
                    "contactAddress": {
                        "description": "User's contact address",
                        "type": "string"
                    },
                    "countryId": {
                        "description": "Selected Country UUID",
                        "type": "string"
                    },
                    "languageId": {
                        "description": "Selected language UUID",
                        "type": "string"
                    },
                    "notes": {
                        "description": "Notes about the user",
                        "type": "string"
                    },
                    "reportingManagerId": {
                        "description": "Reporting manager UUID",
                        "type": "string"
                    },
                    "accountExpiry": {
                        "format": "int64",
                        "description": "Account expiry date in millis ",
                        "type": "integer"
                    },
                    "numberOfApplications": {
                        "format": "int32",
                        "description": "Number of Applications per user",
                        "type": "integer"
                    },
                    "numberOfModules": {
                        "format": "int32",
                        "description": "Number of Modules per user",
                        "type": "integer"
                    },
                    "groupIds": {
                        "description": "UUIDs of the groups attached to user",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "description": "Tags associated with the User",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "firstName": {
                        "description": "User's first name",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "User's last name",
                        "type": "string"
                    },
                    "timeZone": {
                        "description": "Timezone for date/time fields",
                        "type": "string"
                    },
                    "dateFormat": {
                        "description": "Format for date fields",
                        "type": "string"
                    },
                    "timeFormat": {
                        "description": "Format for time fields",
                        "type": "string"
                    },
                    "startOfWeek": {
                        "description": "Start day of the week",
                        "enum": [
                            "Sunday",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday"
                        ],
                        "type": "string"
                    },
                    "showTimeZone": {
                        "description": "Show/Hide timezone in date/time fields",
                        "type": "boolean"
                    },
                    "enable2FA": {
                        "description": "if 2 Factor Authentication enabled",
                        "type": "boolean"
                    },
                    "identityProviderLink": {
                        "description": "Alias of the identity provider user is to be linked to",
                        "type": "string"
                    }
                },
                "example": {
                    "id": "59485130-95f1-11ea-9c17-d9e1353b02d1",
                    "userName": "john.smith",
                    "password": "john@123",
                    "fullName": "John Smith",
                    "displayName": "John S",
                    "email": "john.smith@gmail.com",
                    "contactNumber": "9473865391",
                    "contactAddress": "#78, Andreas Street, New York City",
                    "countryId": "61205fb0-95f1-11ea-9c17-d9e1353b02d1",
                    "languageId": "6aa3ad30-95f1-11ea-9c17-d9e1353b02d1",
                    "notes": "John Smith works as a manager",
                    "reportingManagerId": "746b56b0-95f1-11ea-9c17-d9e1353b02d1",
                    "accountExpiry": "1588060446625",
                    "groupIds": [
                        "746b56b0-95f1-11ea-9c17-d9e1353b02d1",
                        "7ee671b0-95f1-11ea-9c17-d9e1353b02d1"
                    ],
                    "tags": [
                        "admin",
                        "user"
                    ]
                }
            },
            "ExternalUserGridModel": {
                "description": "model to display users",
                "required": [
                    "id",
                    "userName",
                    "status",
                    "email",
                    "displayName"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "UUID of the user",
                        "type": "string"
                    },
                    "userName": {
                        "description": "name of the user",
                        "type": "string"
                    },
                    "status": {
                        "description": "current status of the user",
                        "type": "string"
                    },
                    "email": {
                        "description": "user email",
                        "type": "string"
                    },
                    "accountExpiry": {
                        "format": "int64",
                        "description": "user account expiry date",
                        "type": "integer"
                    },
                    "createdDate": {
                        "format": "int64",
                        "description": "date when user is added",
                        "type": "integer"
                    },
                    "description": {
                        "description": "description",
                        "type": "string"
                    },
                    "contactNumber": {
                        "description": "user contactNumber",
                        "type": "string"
                    },
                    "country": {
                        "description": "user country",
                        "type": "string"
                    },
                    "language": {
                        "description": "user language",
                        "type": "string"
                    },
                    "contactAddress": {
                        "description": "user contactAddress",
                        "type": "string"
                    },
                    "displayName": {
                        "description": "user shortName",
                        "type": "string"
                    },
                    "firstName": {
                        "description": "First Name of the User",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "Last Name of the User",
                        "type": "string"
                    },
                    "noOfApplications": {
                        "format": "int32",
                        "description": "no of applications",
                        "type": "integer"
                    },
                    "noOfModules": {
                        "format": "int32",
                        "description": "no of modules",
                        "type": "integer"
                    },
                    "group": {
                        "description": "groups assigned to the user",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isLdap": {
                        "description": "",
                        "type": "boolean"
                    }
                },
                "example": {
                    "id": "1c456bb0-95f1-11ea-9c17-d9e1353b02d1",
                    "userName": "John",
                    "status": "active",
                    "role": "admin",
                    "group": [
                        "ngp_group1",
                        "ngp_group2"
                    ],
                    "email": "john.keats@subex.com",
                    "fullName": "John Keats",
                    "accountExpiry": "2020-04-27",
                    "createdDate": "Mikel",
                    "shortName": "mike",
                    "description": "admin user",
                    "contactNumber": "987976997",
                    "country": "US",
                    "language": "ENG",
                    "contactAddress": "#123,USA"
                }
            },
            "TrailModel": {
                "description": "Trail Application Model with Previliges",
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    
                    "name": {
                        "description": "Name of the  Trail  application",
                        "type": "string"
                    },
                    "url": {
                        "description": "Front-end URL of the  Trail application",
                        "type": "string"
                    },
                     
                    "public_client": {
                        "description": "A public client is accessed by web  Trail applications",
                        "type": "boolean"
                    },
                    
                    "clientId": {
                        "description": "User Client Id",
                        "type": "string"
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "UserManagement",
            "description": "Basic tag for User Management"
        }
    ],
    "x-modules": [
        {
            "id": "usermanagement_create",
            "name": "Create User/Group",
            "description": "Create a User/Group"
        },
        {
            "id": "usermanagement_view",
            "name": "View User/Group",
            "description": "View a User/Group"
        },
        {
            "id": "usermanagement_edit",
            "name": "Edit User/Group",
            "description": "Edit a User/Group"
        },
        {
            "id": "usermanagement_delete",
            "name": "Delete User/Group",
            "description": "Delete a User/Group"
        },
        {
            "id": "user_management",
            "name": "Application Access",
            "description": "User Management Application Access"
        }
    ],
    "x-default-groups": [
        {
            "name": "NGP-Administrator",
            "description": "Group for the Admin privileges."
        },
        {
            "name": "NGP-User",
            "description": "Guest Group for the service. View roles only.",
            "roles": [
                "user_management",
                "usermanagement_view"
            ]
        }
    ],
    "x-default-parent-details": {
        "parentName": "sysadmin",
        "parentDescription": "Sysadmin"
    },
    "x-default-users": [
        {
            "id": "ngp-admin",
            "name": "NGP Administrator",
            "password": "Pa55w0rd"
        },
        {
            "id": "ngp-user",
            "name": "NGP User",
            "password": "Pa55w0rd",
            "description": "User for the service. Some roles only.",
            "groups": [
                "NGP-User"
            ]
        }
    ]
}
